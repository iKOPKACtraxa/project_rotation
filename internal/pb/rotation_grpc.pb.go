// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RotationClient is the client API for Rotation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RotationClient interface {
	AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*AddBannerResponse, error)
	DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*DeleteBannerResponse, error)
	ClicksIncreasing(ctx context.Context, in *ClicksIncreasingRequest, opts ...grpc.CallOption) (*ClicksIncreasingResponse, error)
	BannerSelection(ctx context.Context, in *BannerSelectionRequest, opts ...grpc.CallOption) (*BannerSelectionResponse, error)
}

type rotationClient struct {
	cc grpc.ClientConnInterface
}

func NewRotationClient(cc grpc.ClientConnInterface) RotationClient {
	return &rotationClient{cc}
}

func (c *rotationClient) AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*AddBannerResponse, error) {
	out := new(AddBannerResponse)
	err := c.cc.Invoke(ctx, "/rotation.Rotation/AddBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotationClient) DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*DeleteBannerResponse, error) {
	out := new(DeleteBannerResponse)
	err := c.cc.Invoke(ctx, "/rotation.Rotation/DeleteBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotationClient) ClicksIncreasing(ctx context.Context, in *ClicksIncreasingRequest, opts ...grpc.CallOption) (*ClicksIncreasingResponse, error) {
	out := new(ClicksIncreasingResponse)
	err := c.cc.Invoke(ctx, "/rotation.Rotation/ClicksIncreasing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotationClient) BannerSelection(ctx context.Context, in *BannerSelectionRequest, opts ...grpc.CallOption) (*BannerSelectionResponse, error) {
	out := new(BannerSelectionResponse)
	err := c.cc.Invoke(ctx, "/rotation.Rotation/BannerSelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RotationServer is the server API for Rotation service.
// All implementations must embed UnimplementedRotationServer
// for forward compatibility
type RotationServer interface {
	AddBanner(context.Context, *AddBannerRequest) (*AddBannerResponse, error)
	DeleteBanner(context.Context, *DeleteBannerRequest) (*DeleteBannerResponse, error)
	ClicksIncreasing(context.Context, *ClicksIncreasingRequest) (*ClicksIncreasingResponse, error)
	BannerSelection(context.Context, *BannerSelectionRequest) (*BannerSelectionResponse, error)
	mustEmbedUnimplementedRotationServer()
}

// UnimplementedRotationServer must be embedded to have forward compatible implementations.
type UnimplementedRotationServer struct {
}

func (UnimplementedRotationServer) AddBanner(context.Context, *AddBannerRequest) (*AddBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBanner not implemented")
}
func (UnimplementedRotationServer) DeleteBanner(context.Context, *DeleteBannerRequest) (*DeleteBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}
func (UnimplementedRotationServer) ClicksIncreasing(context.Context, *ClicksIncreasingRequest) (*ClicksIncreasingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClicksIncreasing not implemented")
}
func (UnimplementedRotationServer) BannerSelection(context.Context, *BannerSelectionRequest) (*BannerSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BannerSelection not implemented")
}
func (UnimplementedRotationServer) mustEmbedUnimplementedRotationServer() {}

// UnsafeRotationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RotationServer will
// result in compilation errors.
type UnsafeRotationServer interface {
	mustEmbedUnimplementedRotationServer()
}

func RegisterRotationServer(s grpc.ServiceRegistrar, srv RotationServer) {
	s.RegisterService(&Rotation_ServiceDesc, srv)
}

func _Rotation_AddBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationServer).AddBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rotation.Rotation/AddBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationServer).AddBanner(ctx, req.(*AddBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotation_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rotation.Rotation/DeleteBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationServer).DeleteBanner(ctx, req.(*DeleteBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotation_ClicksIncreasing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClicksIncreasingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationServer).ClicksIncreasing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rotation.Rotation/ClicksIncreasing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationServer).ClicksIncreasing(ctx, req.(*ClicksIncreasingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotation_BannerSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationServer).BannerSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rotation.Rotation/BannerSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationServer).BannerSelection(ctx, req.(*BannerSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rotation_ServiceDesc is the grpc.ServiceDesc for Rotation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rotation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rotation.Rotation",
	HandlerType: (*RotationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBanner",
			Handler:    _Rotation_AddBanner_Handler,
		},
		{
			MethodName: "DeleteBanner",
			Handler:    _Rotation_DeleteBanner_Handler,
		},
		{
			MethodName: "ClicksIncreasing",
			Handler:    _Rotation_ClicksIncreasing_Handler,
		},
		{
			MethodName: "BannerSelection",
			Handler:    _Rotation_BannerSelection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rotation.proto",
}
